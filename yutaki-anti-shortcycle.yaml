blueprint:
  name: "Gestion PAC Yutaki (anti-cycles courts par temporisation)"
  description: >
    "Automatise le pilotage d'une pompe à chaleur Hitachi Yutaki via un relais (bornes 13/14),
    afin d'éviter les cycles courts. Lorsque la PAC est arrêtée, elle ne peut redémarrer qu'après
    une temporisation paramétrable."
  domain: automation
  input:
    pac_switch:
      name: "Interrupteur PAC"
      description: "Relais connecté aux bornes 13/14 (contact sec)"
      selector:
        entity:
          domain: switch
    start_trigger:
      name: "Déclencheur de mise en marche"
      description: "Entité qui déclenche la demande de marche (ex: température ou booléen)"
      selector:
        entity: {}
    min_off_duration:
      name: "Durée minimale d'arrêt"
      description: "Durée pendant laquelle la PAC doit rester éteinte avant de pouvoir redémarrer"
      default: "00:20:00"
      selector:
        duration: {}

mode: restart

variables:
  last_off: >
    "{{ state_attr(input.pac_switch, 'last_changed') }}"

trigger:
  - platform: state
    entity_id: !input start_trigger
    to: "on"
    id: "demande_marche"

  - platform: state
    entity_id: !input start_trigger
    to: "off"
    id: "demande_arret"

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "demande_marche"
          - condition: template
            value_template: >
              {% set delta = (now() - state_attr(input.pac_switch, 'last_changed')).total_seconds() %}
              {{ is_state(input.pac_switch, 'off') and delta < (as_timedelta(input.min_off_duration).total_seconds()) }}
        sequence:
          - service: logbook.log
            data:
              name: "PAC Yutaki"
              message: "Marche ignorée : délai minimal non écoulé."
              entity_id: !input pac_switch

      - conditions:
          - condition: trigger
            id: "demande_marche"
          - condition: template
            value_template: >
              {% set delta = (now() - state_attr(input.pac_switch, 'last_changed')).total_seconds() %}
              {{ is_state(input.pac_switch, 'off') and delta >= (as_timedelta(input.min_off_duration).total_seconds()) }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input pac_switch

      - conditions:
          - condition: trigger
            id: "demande_arret"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input pac_switch
